<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckServiceActionBase_Service_Description" xml:space="preserve">
    <value>The name of the service to check</value>
  </data>
  <data name="CheckServiceActionBase_Service_FriendlyName" xml:space="preserve">
    <value>Service name</value>
  </data>
  <data name="Error_PauseServiceError_Description" xml:space="preserve">
    <value>Indicates that there is a problem pausing the service</value>
  </data>
  <data name="Error_PauseServiceError_FriendlyName" xml:space="preserve">
    <value>Can't pause service</value>
  </data>
  <data name="Error_ResumeServiceError_Description" xml:space="preserve">
    <value>Indicates that there is a problem resuming the service</value>
  </data>
  <data name="Error_ResumeServiceError_FriendlyName" xml:space="preserve">
    <value>Can't resume service</value>
  </data>
  <data name="Error_RetrieveStatusForServiceError_Description" xml:space="preserve">
    <value>Indicates that there is a problem retrieving the status of the service</value>
  </data>
  <data name="Error_RetrieveStatusForServiceError_FriendlyName" xml:space="preserve">
    <value>Can't retrieve status for service</value>
  </data>
  <data name="Error_ServiceAlreadyRunningError_Description" xml:space="preserve">
    <value>Indicates that the service is already running</value>
  </data>
  <data name="Error_ServiceAlreadyRunningError_FriendlyName" xml:space="preserve">
    <value>Service is already running</value>
  </data>
  <data name="Error_ServiceNotFoundError_Description" xml:space="preserve">
    <value>Indicates that the service can't be found</value>
  </data>
  <data name="Error_ServiceNotFoundError_FriendlyName" xml:space="preserve">
    <value>Service not found</value>
  </data>
  <data name="Error_ServiceNotRunningError_Description" xml:space="preserve">
    <value>Indicates that the service isn't running</value>
  </data>
  <data name="Error_ServiceNotRunningError_FriendlyName" xml:space="preserve">
    <value>Service isn't running</value>
  </data>
  <data name="Error_StartServiceError_Description" xml:space="preserve">
    <value>Indicates that there's a problem starting the service</value>
  </data>
  <data name="Error_StartServiceError_FriendlyName" xml:space="preserve">
    <value>Can't start service</value>
  </data>
  <data name="Error_StopServiceError_Description" xml:space="preserve">
    <value>Indicates that there's a problem stopping the service</value>
  </data>
  <data name="Error_StopServiceError_FriendlyName" xml:space="preserve">
    <value>Can't stop service</value>
  </data>
  <data name="Conditionals_IfServiceAction_Description" xml:space="preserve">
    <value>Marks the beginning of a conditional block of actions depending on whether a service is running, paused, stopped or installed on the computer</value>
  </data>
  <data name="Conditionals_IfServiceAction_FriendlyName" xml:space="preserve">
    <value>If service</value>
  </data>
  <data name="IfServiceAction_ServiceStatus_Description" xml:space="preserve">
    <value>The state of the service to check</value>
  </data>
  <data name="IfServiceAction_ServiceStatus_FriendlyName" xml:space="preserve">
    <value>If service</value>
  </data>
  <data name="IfService_IsInstalled_FriendlyName" xml:space="preserve">
    <value>Is installed</value>
  </data>
  <data name="IfService_IsNotInstalled_FriendlyName" xml:space="preserve">
    <value>Isn't installed</value>
  </data>
  <data name="IfService_IsPaused_FriendlyName" xml:space="preserve">
    <value>Is paused</value>
  </data>
  <data name="IfService_IsRunning_FriendlyName" xml:space="preserve">
    <value>Is running</value>
  </data>
  <data name="IfService_IsStopped_FriendlyName" xml:space="preserve">
    <value>Is stopped</value>
  </data>
  <data name="IsInstalled_Description" xml:space="preserve">
    <value>Check whether a service is installed</value>
  </data>
  <data name="Conditionals_IsInstalled_Summary" xml:space="preserve">
    <value>If service &lt;SERVICE&gt; is installed</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="IsNotInstalled_Description" xml:space="preserve">
    <value>Check whether a service isn't installed</value>
  </data>
  <data name="Conditionals_IsNotInstalled_Summary" xml:space="preserve">
    <value>If service &lt;SERVICE&gt; isn't installed</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="IsPaused_Description" xml:space="preserve">
    <value>Check whether a service is paused</value>
  </data>
  <data name="Conditionals_IsPaused_Summary" xml:space="preserve">
    <value>If service &lt;SERVICE&gt; is paused</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="IsRunning_Description" xml:space="preserve">
    <value>Check whether a service is running</value>
  </data>
  <data name="Conditionals_IsRunning_Summary" xml:space="preserve">
    <value>If service &lt;SERVICE&gt; is running</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="IsStopped_Description" xml:space="preserve">
    <value>Check whether a service is stopped</value>
  </data>
  <data name="Conditionals_IsStopped_Summary" xml:space="preserve">
    <value>If service &lt;SERVICE&gt; is stopped</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="Pause_Description" xml:space="preserve">
    <value>Pause a running Windows service</value>
  </data>
  <data name="Pause_FriendlyName" xml:space="preserve">
    <value>Pause service</value>
  </data>
  <data name="Pause_ServiceName_Description" xml:space="preserve">
    <value>The name of the service to pause</value>
  </data>
  <data name="Pause_ServiceName_FriendlyName" xml:space="preserve">
    <value>Service to pause</value>
  </data>
  <data name="Pause_Summary" xml:space="preserve">
    <value>Pause service &lt;SERVICENAME&gt;</value>
    <comment>{Locked="&lt;SERVICENAME&gt;"}</comment>
  </data>
  <data name="Paused_Description" xml:space="preserve">
    <value>Check whether a service is paused</value>
  </data>
  <data name="Wait_Paused_Summary" xml:space="preserve">
    <value>Wait for service &lt;SERVICE&gt; to pause</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="Resume_Description" xml:space="preserve">
    <value>Resume a paused Windows service</value>
  </data>
  <data name="Resume_FriendlyName" xml:space="preserve">
    <value>Resume service</value>
  </data>
  <data name="Resume_ServiceName_Description" xml:space="preserve">
    <value>The name of the service to resume</value>
  </data>
  <data name="Resume_ServiceName_FriendlyName" xml:space="preserve">
    <value>Service to resume</value>
  </data>
  <data name="Resume_Summary" xml:space="preserve">
    <value>Resume service &lt;SERVICENAME&gt;</value>
    <comment>{Locked="&lt;SERVICENAME&gt;"}</comment>
  </data>
  <data name="Started_Description" xml:space="preserve">
    <value>Check whether a service is running</value>
  </data>
  <data name="Wait_Started_Summary" xml:space="preserve">
    <value>Wait for service &lt;SERVICE&gt; to start</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="Services_Description" xml:space="preserve">
    <value>Control the workstation's installed services</value>
  </data>
  <data name="Services_FriendlyName" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="Start_Description" xml:space="preserve">
    <value>Start a stopped Windows service</value>
  </data>
  <data name="Start_FriendlyName" xml:space="preserve">
    <value>Start service</value>
  </data>
  <data name="Start_ServiceName_Description" xml:space="preserve">
    <value>The name of the service to start</value>
  </data>
  <data name="Start_ServiceName_FriendlyName" xml:space="preserve">
    <value>Service to start</value>
  </data>
  <data name="Start_Summary" xml:space="preserve">
    <value>Start service &lt;SERVICENAME&gt;</value>
    <comment>{Locked="&lt;SERVICENAME&gt;"}</comment>
  </data>
  <data name="Stop_Description" xml:space="preserve">
    <value>Stop a running Windows service</value>
  </data>
  <data name="Stop_FriendlyName" xml:space="preserve">
    <value>Stop service</value>
  </data>
  <data name="Stop_ServiceName_Description" xml:space="preserve">
    <value>The name of the service to stop</value>
  </data>
  <data name="Stop_ServiceName_FriendlyName" xml:space="preserve">
    <value>Service to stop</value>
  </data>
  <data name="Stop_Summary" xml:space="preserve">
    <value>Stop service &lt;SERVICENAME&gt;</value>
    <comment>{Locked="&lt;SERVICENAME&gt;"}</comment>
  </data>
  <data name="Stopped_Description" xml:space="preserve">
    <value>Check whether a service is stopped</value>
  </data>
  <data name="Wait_Stopped_Summary" xml:space="preserve">
    <value>Wait for service &lt;SERVICE&gt; to stop</value>
    <comment>{Locked="&lt;SERVICE&gt;"}</comment>
  </data>
  <data name="WaitForService_ToPause_FriendlyName" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="WaitForService_ToStart_FriendlyName" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="WaitForService_ToStop_FriendlyName" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="Wait_WaitForServiceAction_Description" xml:space="preserve">
    <value>Suspend running the flow until a service starts, stops or pauses</value>
  </data>
  <data name="Wait_WaitForServiceAction_FriendlyName" xml:space="preserve">
    <value>Wait for service</value>
  </data>
  <data name="WaitForServiceAction_WaitFor_Description" xml:space="preserve">
    <value>Specifies whether the flow pauses until a certain service starts, stops or pauses</value>
  </data>
  <data name="WaitForServiceAction_WaitFor_FriendlyName" xml:space="preserve">
    <value>Wait for service to</value>
  </data>
  <data name="ErrorMessage_RetrieveStatusForServiceError" xml:space="preserve">
    <value>Can't retrieve status for service '{0}'</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_ServiceNotFoundError" xml:space="preserve">
    <value>Service '{0}' can't be found on the computer</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessagePart_ServiceAlreadyRunningError" xml:space="preserve">
    <value>An instance of the service is already running</value>
  </data>
  <data name="ErrorMessagePart_ServiceNotFound" xml:space="preserve">
    <value>Service can't be found on the computer</value>
  </data>
  <data name="ErrorMessagePart_ServiceNotRunningError" xml:space="preserve">
    <value>The service hasn't been started</value>
  </data>
  <data name="ErrorMessage_PauseServiceError" xml:space="preserve">
    <value>Can't pause service '{0}'</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_ResumeServiceError" xml:space="preserve">
    <value>Can't resume service '{0}'</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_ServiceAlreadyRunningError" xml:space="preserve">
    <value>Service '{0}' is already running</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_ServiceNotRunningError" xml:space="preserve">
    <value>Service '{0}' isn't running</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_StartServiceError" xml:space="preserve">
    <value>Can't start service '{0}'</value>
    <comment>{Locked="{0}"}</comment>
  </data>
  <data name="ErrorMessage_StopServiceError" xml:space="preserve">
    <value>Can't stop service '{0}'</value>
    <comment>{Locked="{0}"}</comment>
  </data>
</root>